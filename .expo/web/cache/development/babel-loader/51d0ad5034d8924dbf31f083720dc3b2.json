{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { TextInput, List } from 'react-native-paper';\nexport var Autocomplete = function Autocomplete(_ref) {\n  var LoadData = _ref.LoadData,\n      data = _ref.data,\n      icon = _ref.icon;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      displayList = _useState2[0],\n      setdisplayList = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      textinput = _useState4[0],\n      settextinput = _useState4[1];\n\n  var _useState5 = useState(data),\n      _useState6 = _slicedToArray(_useState5, 2),\n      results = _useState6[0],\n      setresults = _useState6[1];\n\n  useEffect(function _callee() {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(textinput.length >= 3)) {\n              _context.next = 3;\n              break;\n            }\n\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(LoadData(textinput.toLowerCase()));\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, [textinput]);\n\n  function textChange(e) {\n    settextinput(e);\n    if (e !== '') setdisplayList(results.filter(function (o) {\n      return o.toUpperCase().includes(e.toUpperCase());\n    }).slice(0, 5));else setdisplayList([]);\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(View, {\n    style: styles.background\n  }, React.createElement(View, null, React.createElement(TextInput, {\n    theme: {\n      colors: {\n        text: '#f0f0f0',\n        background: '#1e1e1e',\n        placeholder: '#f0f0f0'\n      }\n    },\n    left: React.createElement(TextInput.Icon, {\n      name: \"feature-search-outline\",\n      color: 'white'\n    }),\n    placeholder: \"Search pok\\xE9mon\",\n    value: textinput,\n    onChangeText: function onChangeText(e) {\n      return textChange(e);\n    }\n  })), displayList.map(function (o, i) {\n    return React.createElement(List.Item, {\n      key: i,\n      title: o,\n      onPress: function onPress() {\n        settextinput(o), setdisplayList([]);\n      },\n      left: function left(props) {\n        return React.createElement(List.Icon, _extends({}, props, {\n          icon: icon\n        }));\n      }\n    });\n  })));\n};\nvar styles = StyleSheet.create({\n  background: {\n    backgroundColor: '#f0f0f0',\n    position: 'relative',\n    marginTop: 20\n  },\n  input: {\n    backgroundColor: '#1e1e1e'\n  }\n});","map":{"version":3,"sources":["C:/Users/2904366/OneDrive - Jabil/Desktop/Pokedex-ReactNative/components/Autocomplete.jsx"],"names":["React","useEffect","useState","TextInput","List","Autocomplete","LoadData","data","icon","displayList","setdisplayList","textinput","settextinput","results","setresults","length","toLowerCase","textChange","e","filter","o","toUpperCase","includes","slice","styles","background","colors","text","placeholder","map","i","props","StyleSheet","create","backgroundColor","position","marginTop","input"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { StyleSheet, View } from 'react-native'\r\nimport { TextInput, List } from 'react-native-paper';\r\n\r\nexport const Autocomplete = ({ LoadData, data, icon }) => {\r\n\r\n    const [displayList, setdisplayList] = useState([])\r\n    const [textinput, settextinput] = useState('')\r\n    const [results, setresults] = useState(data);\r\n    \r\n    \r\n\r\n    useEffect(async () => {\r\n\r\n        if (textinput.length >= 3)\r\n            await LoadData(textinput.toLowerCase())\r\n    }, [textinput])\r\n\r\n\r\n\r\n   \r\n\r\n    function textChange(e) {\r\n        settextinput(e);\r\n        if (e !== '')\r\n            setdisplayList(results.filter(o => o.toUpperCase().includes(e.toUpperCase())).slice(0, 5))\r\n        else\r\n            setdisplayList([])\r\n    }\r\n\r\n\r\n    return (<>\r\n\r\n        <View style={styles.background}>\r\n            <View>\r\n                <TextInput\r\n                    theme={{ colors: { text: '#f0f0f0', background: '#1e1e1e', placeholder: '#f0f0f0' } }}\r\n                    left={<TextInput.Icon\r\n                        name=\"feature-search-outline\" color={'white'} />}\r\n                    placeholder=\"Search pokÃ©mon\"\r\n                    value={textinput}\r\n                    onChangeText={(e) => textChange(e)} />\r\n            </View>\r\n\r\n            {displayList.map((o, i) => <List.Item key={i}\r\n                title={o}\r\n                onPress={() => { settextinput(o), setdisplayList([]) }}\r\n                left={props => <List.Icon {...props} icon={icon} />}\r\n            />)}\r\n        </View>\r\n\r\n    </>)\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n\r\n    background: {\r\n        backgroundColor: '#f0f0f0',\r\n        position: 'relative',\r\n        marginTop: 20\r\n    },\r\n    input: {\r\n        backgroundColor: '#1e1e1e'\r\n    }\r\n\r\n})"]},"metadata":{},"sourceType":"module"}